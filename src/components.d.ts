/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppHome {
    }
    interface AppRoot {
    }
    /**
     * Displays a note
     */
    interface FskNote {
        /**
          * HTML property note-id: id of the note to display
         */
        "noteId": number;
    }
    /**
     * Lists notes
     */
    interface FskNotesList {
    }
}
export interface FskNoteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFskNoteElement;
}
export interface FskNotesListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFskNotesListElement;
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLFskNoteElementEventMap {
        "closedNote": any;
        "savedNote": any;
    }
    /**
     * Displays a note
     */
    interface HTMLFskNoteElement extends Components.FskNote, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFskNoteElementEventMap>(type: K, listener: (this: HTMLFskNoteElement, ev: FskNoteCustomEvent<HTMLFskNoteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFskNoteElementEventMap>(type: K, listener: (this: HTMLFskNoteElement, ev: FskNoteCustomEvent<HTMLFskNoteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFskNoteElement: {
        prototype: HTMLFskNoteElement;
        new (): HTMLFskNoteElement;
    };
    interface HTMLFskNotesListElementEventMap {
        "selectedNote": any;
    }
    /**
     * Lists notes
     */
    interface HTMLFskNotesListElement extends Components.FskNotesList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFskNotesListElementEventMap>(type: K, listener: (this: HTMLFskNotesListElement, ev: FskNotesListCustomEvent<HTMLFskNotesListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFskNotesListElementEventMap>(type: K, listener: (this: HTMLFskNotesListElement, ev: FskNotesListCustomEvent<HTMLFskNotesListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFskNotesListElement: {
        prototype: HTMLFskNotesListElement;
        new (): HTMLFskNotesListElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "fsk-note": HTMLFskNoteElement;
        "fsk-notes-list": HTMLFskNotesListElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppRoot {
    }
    /**
     * Displays a note
     */
    interface FskNote {
        /**
          * HTML property note-id: id of the note to display
         */
        "noteId"?: number;
        /**
          * Sent when user clicks on Close button
          * @event
         */
        "onClosedNote"?: (event: FskNoteCustomEvent<any>) => void;
        /**
          * Sent when user clicks on Save button
          * @event
         */
        "onSavedNote"?: (event: FskNoteCustomEvent<any>) => void;
    }
    /**
     * Lists notes
     */
    interface FskNotesList {
        /**
          * Sent when user selects a note by clicking on it
          * @event
         */
        "onSelectedNote"?: (event: FskNotesListCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-root": AppRoot;
        "fsk-note": FskNote;
        "fsk-notes-list": FskNotesList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            /**
             * Displays a note
             */
            "fsk-note": LocalJSX.FskNote & JSXBase.HTMLAttributes<HTMLFskNoteElement>;
            /**
             * Lists notes
             */
            "fsk-notes-list": LocalJSX.FskNotesList & JSXBase.HTMLAttributes<HTMLFskNotesListElement>;
        }
    }
}
